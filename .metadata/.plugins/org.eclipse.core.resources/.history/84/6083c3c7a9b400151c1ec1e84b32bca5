/*
 * GCSpaceInfo.cpp
 *
 *  Created on: 4 janv. 2016
 *      Author: jbapt
 */

#include "GCSpaceInfo.h"
#include "stdlib.h"

using namespace Bee;

GCSpaceInfo::GCSpaceInfo(){
}



unsigned short GCSpaceInfo::shortAt(ulong offset) {
	return (contents[offset]);
}

ulong * GCSpaceInfo::at(ulong offset) {
	return (ulong * )((contents[offset] / 2))
			+ ((contents[offset + 1] << 15));
}

void GCSpaceInfo::atPut(ulong offset, ulong pointer) {
	contents[offset] = ((unsigned short) (pointer & 0x7FFF)) * 2;
	contents[offset + 1] = (unsigned short)(pointer >> 15);
}

ulong * GCSpaceInfo::base() {
	return this->at(4/2);
}
ulong * GCSpaceInfo::base_3() {
	return this->at(16/2);
}
ulong * GCSpaceInfo::commitedLimit() {
	return this->at(12/2);
}
ulong * GCSpaceInfo::nextFree() {
	return this->at(4/2);
}
ulong * GCSpaceInfo::reservedLimit() {
	return this->at(20/2);
}
ulong * GCSpaceInfo::softLimit() {
	return this->at(0);
}

void GCSpaceInfo::base(ulong * value) {
	this->atPut(4/2, value);
}

void GCSpaceInfo::base_3(ulong * value) {
	this->atPut(16/2, value);
}
void GCSpaceInfo::commitedLimit(ulong * value) {
	this->atPut(12/2, value);
}
void GCSpaceInfo::nextFree(ulong * value) {
	this->atPut(8/2, value);
}

void GCSpaceInfo::reservedLimit(ulong * value) {
	this->atPut(20/2, value);
}
void GCSpaceInfo::softLimit(ulong * value) {
	this->atPut(0, value);
}

void GCSpaceInfo::setContents(ulong * value){
	contents = (unsigned short *) value;
}

void GCSpaceInfo::freeMock(){
	free(contents);

}

GCSpaceInfo GCSpaceInfo::newSize(ulong size) {
	GCSpaceInfo returnValue = GCSpaceInfo();
	returnValue.setContents((ulong *) malloc(size));
	return returnValue;
}

GCSpaceInfo GCSpaceInfo::currentTo() {
	GCSpaceInfo returnValue = GCSpaceInfo();
	returnValue.setContents((ulong *) 0x100416C8);
	return returnValue;
}
GCSpaceInfo GCSpaceInfo::currentFrom() {
	GCSpaceInfo returnValue = GCSpaceInfo();
	returnValue.setContents((ulong *) 0x100416B0);
	return returnValue;
}
GCSpaceInfo GCSpaceInfo::old() {
	GCSpaceInfo returnValue = GCSpaceInfo();
	returnValue.setContents((ulong *) 0x100406B0);
	return returnValue;
}

GCSpaceInfo GCSpaceInfo::mockForTest() {
	GCSpaceInfo returnValue = GCSpaceInfo();
	returnValue.setContents((ulong *) malloc(100));
	return returnValue;
}



