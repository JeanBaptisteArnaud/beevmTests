/*
 * GenerationalGC.cpp
 *
 *  Created on: 18 dï¿½c. 2015
 *      Author: Arnaud Jean-Baptiste
 */

#include "GenerationalGC.h"
#include "GarbageCollector.h"
#include <iostream>
#include "../DataStructures/VMMemory.h"

using namespace std;
using namespace Bee;

GenerationalGC::GenerationalGC() {

}

GenerationalGC::~GenerationalGC() {
}

bool GenerationalGC::arenaIncludes(unsigned long *pointer) {
	// TODO
	return false;

}

GenerationalGC * GenerationalGC::gcForTesting() {

	GenerationalGC * flipper = new GenerationalGC();
	GCSpace from = GCSpace::dynamicNew(2048 * 4);
	GCSpace old = GCSpace::dynamicNew(2048 * 8);
	GCSpace to = GCSpace::dynamicNew(2048 * 4);
	GCSpace local = GCSpace::dynamicNew(1024 * 4 * 7);
//	ReferencedVMArray rememberSet = (ReferencedVMArray new: 1000)
//		at: 1 put: 2;
//		yourself.
//
//
//	literals := (Array new: 1000)
//		at: 1 put: 2;
//		yourself.
//
//
//	flipper
//		oldSpace: old;
//		toSpace: to;
//		fromSpace: from;
//		rememberSetArray: rememberSet;
//		literalsReferencesArray: literals;
//		localSpace: local.
//	flipper rescuedEphemerons on: old.
//	self
//		execute: [:vmarray | vmarray emptyReserving: 1000]
//		proxying: flipper rescuedEphemerons.
//	self execute: [:proxy | proxy initLocals; initNonLocals] proxying: flipper.
	return flipper;
}

unsigned long * GenerationalGC::framePointerToStartWalkingTheStack() {
	return (ulong *) 0;
}

bool GenerationalGC::hasToPurge(unsigned long *pointer) {
	// TODO
	return false;

}

void GenerationalGC::purgeLiteralsReference() {
	long kept = 0;
	unsigned long offset;
	unsigned long *literal;
	for (ulong index = 1; index < literalsReferences.size();
			index = index + 2) {
		literal = literalsReferences[index];
		if (this->arenaIncludes(literal)) {
			kept = kept + 2;
			offset = (unsigned long) literalsReferences[index + 1];
			literalsReferences[kept - 1] = literal;
			literalsReferences[kept] = (unsigned long *) offset;
		}
	}
}

void GenerationalGC::fixReferencesOrSetTombstone(ulong *weakContainer) {

	unsigned long *referenceOrThombstone;
	for (ulong index = 0; index < _size(weakContainer); index++) {
		ulong *instance = (ulong*) weakContainer[index];
		if (this->arenaIncludes(instance)) {
			if (_isProxy(instance)) {
				referenceOrThombstone = _proxee(instance);
			} else {
				referenceOrThombstone = residueObject;
			}
			weakContainer[index] = (ulong) referenceOrThombstone;
		}
	}
}

void GenerationalGC::purgeRememberSet() {
	long kept = 0;
	for (ulong index = 1; index <= rememberSet.size(); index++) {
		ulong *object = rememberSet[index];
		rememberSet[index] = nil;
		if (this->hasToPurge(object)) {
			_beNotInRememberedSet(object);
		} else {
			rememberSet[kept + 1] = object;
		}

		rememberSet.size(kept);
	}
}

void GenerationalGC::followRoots() {
	this->followRememberSet();
}

void GenerationalGC::followRememberSet() {
	for (ulong index = 1; index < rememberSet.size(); index++) {
		this->follow(rememberSet[index]);
	}
}

unsigned long* GarbageCollector::framePointerToStartWalkingTheStack() {
	return MEM_globalFramePointerToWalkStack;
}

unsigned long* GenerationalGC::codeCacheAtOffset(unsigned long offset) {
	return (ulong*) (*MEM_JIT_codeCachePointer + offset);
}

void GenerationalGC::moveClassCheckReferences() {
	unsigned long *moved;
	for (ulong index = 1; index < classCheckReferences.size(); index++) {
		unsigned long offset = (ulong) classCheckReferences[index];
		unsigned long *reference = codeCacheAtOffset(offset);
		ulong *object = (ulong*) *reference;
		if (this->arenaIncludes(object)) {
			if (_isProxy(object)) {
				moved = _proxee(object);
			} else {
				moved = moveToOldSpace(object);
			}
			*reference = (unsigned long) moved;
		}
	}

	*MEM_anyCompiledMethodInFromSpace = 0;
}

void GenerationalGC::moveToOldAll(ReferencedVMArray &objects) {
	unsigned long *moved;
	for (ulong index = 1; index <= objects.size(); index++) {
		ulong *object = objects[index];
		if (this->arenaIncludes(object)) {
			if (_isProxy(object)) {
				moved = _proxee(object);
			} else {
				moved = this->moveToOldSpace(object);
			}
			// notice 1-based index
			objects[index] = moved;
		}
	}

}

unsigned long* GenerationalGC::moveToOldSpace(unsigned long *object) {
	unsigned long *copy = this->copyTo(object, oldSpace);
	this->holdReferenceTo(copy);
	return copy;
}

unsigned long GenerationalGC::holdReferenceTo(unsigned long *object) {
	if (!_isInRememberSet(object)) {
		_beInRememberSet(object);
		rememberSet.add(object);
	}

}

unsigned long* GenerationalGC::copyTo(unsigned long *object, GCSpace &to) {
	unsigned long *copy = 0;
	copy = to.shallowCopy(object);
	object = _proxee(copy);
	return copy;
}

void GenerationalGC::followCodeCacheReferences() {
	if (*MEM_polymorphicMethodCacheReferesToNewCM) {
		*MEM_polymorphicMethodCacheReferesToNewCM = false;
		this->clearPolymorphicMethodCache();
	}

	if (*MEM_anyCompiledMethodInFromSpace)
		this->moveClassCheckReferences();

	if (*MEM_checkNewNativizedCompiledMethods) {
		*MEM_checkNewNativizedCompiledMethods = false;
		this->moveToOldAll(nativizedMethods);
	}
	this->moveToOldAll(literalsReferences);
}

void GenerationalGC::flipSpaces() {
	auxSpace.loadFrom(toSpace);
	toSpace.loadFrom(fromSpace);
	fromSpace.loadFrom(auxSpace);
	toSpace.reset();
	this->updateSpacesDelta();
}

void GenerationalGC::updateSpacesDelta() {
	unsigned long delta;
	if (!this->spacesDelta()) {
		delta = toSpace.getBase() - fromSpace.getBase();
		this->spacesDelta(delta);
	}
}

unsigned long GenerationalGC::spacesDelta() {
	return memoryAt(0x1004175C);
}

void GenerationalGC::spacesDelta(unsigned long delta) {
	memoryAtPut((unsigned long *) 0x1004175C, delta);
}

void GenerationalGC::fixReferencesFromNativeMethods() {

	for (int index = 0; index < literalsReferences.size(); index = index + 2) {
		unsigned long literal, *reference = 0;
		unsigned long offset = 0;
		literal = (unsigned long) literalsReferences[index];
		offset = (unsigned long) literalsReferences[index + 1];
		reference = codeCacheAtOffset(offset);
		memoryAtPut(reference, literal);
	}
}

void GenerationalGC::cleanRememberSet() {
	int kept = 0;
	unsigned long * object = 0;
	for (int index = 0; index < rememberSet.size(); index++) {
		object = rememberSet[index];
		rememberSet[index] = nil;
		if (!(toSpace.includes(object))) {
			kept++;
			rememberSet[kept] = object;
		}
	}
	rememberSet.size(kept);
}

void GenerationalGC::addInterrupt() {
	//self interrupt: 11
}

void GenerationalGC::initLocals() {
	localSpace.reset();
	stack.setSpace(&localSpace); //emptyReserving: 1024.
	unknowns.setSpace(&localSpace); // emptyReserving: 1025.
	ephemerons.setSpace(&localSpace); // emptyReserving: 1026.
	weakContainers.setSpace(&localSpace); // emptyReserving: 1027
}

void GenerationalGC::initNonLocals() {
	rescuedEphemerons.setSpace(&oldSpace);
	rememberSet.setSpace(&oldSpace);
	literalsReferences.setSpace(&oldSpace);
	nativizedMethods.setSpace(&oldSpace);
	classCheckReferences.setSpace(&oldSpace);
}

unsigned long * GenerationalGC::moveToOldOrTo(unsigned long * object) {
	if (_isSecondGeneration(object))
		return this->moveToOldSpace(object);
	else
		return this->moveToToSpace(object);
}

unsigned long * GenerationalGC::moveToToSpace(unsigned long * object) {
	_beSecondGeneration(object);
	return this->copyTo(object, toSpace);
}

void GenerationalGC::collect() {
	this->loadSpaces(); // need to be change
	this->initLocals(); // need to be change
	this->initNonLocals(); // need to be change
	//Thinks we do not need that:: this->useNativeObjects();
	this->purgeLiteralsReference();
	this->purgeRememberSet();
	this->followCodeCacheReferences();
	this->followRoots();
	this->followStack();
	this->rescueEphemerons();
	this->makeRescuedEphemeronsNonWeak();
	this->fixWeakContainers();
	this->flipSpaces();
	this->fixReferencesFromNativeMethods();
	this->cleanRememberSet();
	////Thinks we do not need that:: this->forgetNativeObjects();
	////Thinks we do not need that:: this->addInterrupt();
	////Thinks we do not need that:: this->saveSpaces();
}

