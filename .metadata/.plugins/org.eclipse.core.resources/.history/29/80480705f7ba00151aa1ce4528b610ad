#include "../DataStructures/Memory.h"
#include "cute.h"
#include "cute_suite.h"

#include "Windows.h"
#include "stdlib.h"

extern cute::suite make_suite_VMMemoryTest();

using namespace std;

void basicSize() {
	unsigned char * header;
	header = (unsigned char *) malloc(12);
	mockArray(header);
	ulong * object = (ulong *) &header[8];
	ASSERTM("size ", (_basicGetSize(object) == 3));
	_basicSetSize(object, 122);
	ASSERTM("size ", (_basicGetSize(object) == 122));
	free(header);

	header = mockArray1024();
	ASSERTM("size ", (_size(object) == 1024));
	_setExtendedSize(object, 122);
	ASSERTM("size ", (_size(object) == 122));

}

cute::suite make_suite_VMMemoryTest() {
	cute::suite s;
	//s.push_back(CUTE(headerOf));
	//s.push_back(CUTE(basicSize));
	//s.push_back(CUTE(beeExtended));
	//s.push_back(CUTE(rotateLeftTest));
	//s.push_back(CUTE(objectFlagManipulation));
	//s.push_back(CUTE(virtualBehavior));
	//s.push_back(CUTE(newGCSpaceShallowCopy));
	//s.push_back(CUTE(basicAt));
	//s.push_back(CUTE(shallowCopyBytes));
	//s.push_back(CUTE(shallowCopyBytes2));
	//s.push_back(CUTE(shallowCopyBytes3));
	//s.push_back(CUTE(shallowCopyBytesExtended));
	//s.push_back(CUTE(shallowCopyExtended));
	//s.push_back(CUTE(synchronousGCSpace));
	return s;
}

