/*
 * Memory.cpp
 *
 *  Created on: 14 janv. 2016
 *      Author: jbapt
 */

#include "cute.h"
#include "cute_suite.h"

#include <iostream>

#include "Memory.h"
#include "Windows.h"
#include <vector>

using namespace Bee;
using namespace std;

Memory::Memory() {
}

Memory * Memory::singleton = 0;

void GCSpace::garbageCollect() {
	//	^Memory current garbageCollect: self
}

GCSpace * Memory::growIfNeeded(ulong size) {
	ulong total = currentSpace.size();
	ulong used = currentSpace.used();
	long free = total - size;
	if ((used / total) > 0.9 || (free < size)) {
		return this->acquireMoreSpace();
	} else {
		return &currentSpace;
	}
}

void Memory::addSpace(GCSpace * space) {
	spaces.push_back(space);
}

void Memory::addCollectedSpace(GCSpace * space) {
	collectedSpaces.push_back(space);
}

void Memory::initializeCollector() {
}

void Memory::createPinnedSpace() {
}

void Memory::startUp() {
//	this->initializeCollector();
//	this->createNextSpace();
//	this->acquireMoreSpace();
//	this->createPinnedSpace();
}

GCSpace * Memory::acquireMoreSpace() {
	currentSpace = nextSpace;
	this->addSpace(&nextSpace);
	this->createNextSpace();
	this->addCollectedSpace(&currentSpace);
	return &currentSpace;
}

unsigned long * Memory::VM() {
	GCSpace space = GCSpace();
	ulong * address = (ulong *) VirtualAlloc((void *) 0x10000000, 0x42000,
	MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	if (!address)
		cout << GetLastError() << endl;
	GCSpaceInfo info = GCSpaceInfo();
	ulong * limit = (ulong *) (((ulong) address + size));
	info.setBase(address);
	info.setNextFree(address);
	info.setCommitedLimit(limit);
	info.setSoftLimit(limit);
	info.setReservedLimit((ulong *) (0x10000000 + 0x42000));
	space.setInfo(info);
	space.load();
	currentSpace = space;
	this->addSpace(&space);
	space.setBase(address);
		space.setNextFree(localAddress);
		space.setCommitedLimit(limit);
		space.setSoftLimit(limit);
		space.setReservedLimit((ulong *) (512 * 1024));
	return address;
}

GCSpaceInfo Memory::allocateWithoutFinalization(ulong size) {
	ulong * address = (ulong *) VirtualAlloc((void *) 0, size,
	MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (!address)
		cout << GetLastError() << endl;
	GCSpaceInfo info = GCSpaceInfo();
	ulong * limit = (ulong *) (((ulong) address + size));
	info.setBase(address);
	info.setNextFree(address);
	info.setCommitedLimit(limit);
	info.setSoftLimit(limit);
	info.setReservedLimit(limit);
	return info;
}

GCSpace Memory::dynamicNew(ulong size) {
	GCSpace space = GCSpace();
	ulong * address = (ulong *) VirtualAlloc((void *) 0, 1024 * 1024 * 1024,
	MEM_RESERVE, PAGE_READWRITE);

	ulong * localAddress = _commit((ulong) address, size);
	if (!localAddress) {
		cout << GetLastError() << endl;
		cerr << address << endl;
		cerr << localAddress << endl;
		cerr << size << endl;
		cerr << 512 * 1024 << endl;

	}
	GCSpaceInfo info = GCSpaceInfo();
	ulong * limit = (ulong *) (((ulong) localAddress + size));
	info.setBase(address);
	info.setNextFree(localAddress);
	info.setCommitedLimit(limit);
	info.setSoftLimit(limit);
	info.setReservedLimit((ulong *) (512 * 1024));
	space.setInfo(info);
	space.load();
	this->addSpace(&space);
	space.setBase(address);
	space.setNextFree(localAddress);
	space.setCommitedLimit(limit);
	space.setSoftLimit(limit);
	space.setReservedLimit((ulong *) (512 * 1024));
	return space;
}

Memory * Memory::current() {
	if (singleton == 0) {
		singleton = new Memory();
		singleton->startUp();
	}
	return singleton;
}

void Memory::releaseEverything() {
	singleton = 0;
	for (int index = spaces.size(); 0 < index; index = spaces.size()) {
		GCSpace * localSpace = this->spaces.back();
		this->spaces.pop_back();
		localSpace->release();
	}
}

void Memory::createNextSpace() {
	nextSpace = GCSpace();
	nextSpace.setInfo(this->allocateWithoutFinalization(64 * 1024 * 1024));
	nextSpace.load();
	nextSpace.setSoftLimit(
			(ulong *) nextSpace.getSoftLimit() - (64 * 1024 / 2));
}
